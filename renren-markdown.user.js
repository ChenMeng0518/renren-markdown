// Generated by IcedCoffeeScript 1.4.0a
(function() {
  var DelayTrigger, arrayize, b64_to_str, checkPageReady, cmp, cmpSpec, embed, escapeCssText, getCssRules, getCssRulesN, getGist, getSpec, getTextNodesIn, iced, inlineCss, rrmd, safeParse, spanifyAll, str_to_b64, unembed, __iced_deferrals, __iced_k, __iced_k_noop,
    __slice = [].slice,
    _this = this;

  iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  
// vim: nowrap
// Copyright (c) 2013, smilekzs. (MIT Licensed)
// ==UserScript==
// @name          renren-markdown
// @namespace     http://github.com/smilekzs
// @version       0.4.36
// @description   write well-formatted blogs on renren.com with markdown
// @include       *blog.renren.com/blog/*Blog*
// @include       *blog.renren.com/blog/*edit*
// @include       *blog.renren.com/*Entry*
// ==/UserScript==

//#include
;

  DelayTrigger = (function() {

    function DelayTrigger(cb) {
      this.cb = cb;
      this.tid = null;
    }

    DelayTrigger.prototype.trigger = function(delay) {
      var _this = this;
      if (this.tid != null) clearTimeout(this.tid);
      return this.tid = setTimeout((function() {
        if (_this.cb() != null) return _this.trigger(delay);
      }), delay);
    };

    return DelayTrigger;

  })();

  arrayize = function(a) {
    if (a != null ? a.length : void 0) {
      return [].slice.call(a);
    } else {
      return [];
    }
  };

  getTextNodesIn = function(node) {
    var getTextNodes, textNodes;
    textNodes = [];
    getTextNodes = function(node) {
      var n, _i, _len, _ref;
      if (node.nodeType === 3) {
        textNodes.push(node);
      } else {
        _ref = node.childNodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          n = _ref[_i];
          getTextNodes(n);
        }
      }
      return null;
    };
    getTextNodes(node);
    return textNodes;
  };

  getCssRulesN = 0;

  getCssRules = function(css, cb) {
    var doc;
    doc = JQ("<iframe id=\"rrmd_" + (getCssRulesN++) + "\" style=\"position: fixed; left: -1000px; width: 1px; height: 1px;\" />").appendTo('body')[0].contentDocument;
    return JQ(doc).ready(function() {
      doc.write("<style type=\"text/css\">" + css + "</style>");
      return cb(arrayize(doc.styleSheets[0].cssRules));
    });
  };

  escapeCssText = function(cssText) {
    return cssText.replace(/"/g, "'");
  };

  getSpec = function(x) {
    return SPECIFICITY.calculate(x)[0].specificity.split(',').map(Number);
  };

  cmp = function(a, b) {
    switch (false) {
      case !(a < b):
        return -1;
      case !(a > b):
        return +1;
      default:
        return 0;
    }
  };

  cmpSpec = function(a, b) {
    var c, i, _i;
    for (i = _i = 0; _i < 4; i = ++_i) {
      if ((c = cmp(a[i], b[i]))) return c;
    }
    return 0;
  };

  inlineCss = function(root, rules) {
    var prune, valid;
    valid = function(s) {
      return s && s[0] !== '-';
    };
    prune = function(s) {
      if (s.match(/-value$/) && s !== 'drop-initial-value') {
        s = s.slice(0, s.lastIndexOf('-'));
      }
      return s;
    };
    rules.map(function(r) {
      return {
        r: r,
        spec: getSpec(r.selectorText)
      };
    }).sort(function(a, b) {
      return cmpSpec(a.spec, b.spec);
    }).map(function(r) {
      return r.r;
    }).reverse().forEach(function(r) {
      var sel, style;
      sel = r.selectorText;
      style = r.style;
      arrayize(root.querySelectorAll(sel)).forEach(function(el) {
        var key, orig, value, _i, _len;
        for (_i = 0, _len = style.length; _i < _len; _i++) {
          key = style[_i];
          if (!valid(key)) continue;
          key = prune(key);
          value = style.getPropertyValue(key).trim();
          if (!valid(value)) continue;
          orig = el.style.getPropertyValue(key);
          if (!orig) el.style.setProperty(key, value, '');
        }
        return null;
      });
      return null;
    });
    return root;
  };

  spanifyAll = function(el) {
    var jel, spanify;
    jel = JQ(el);
    spanify = function(el, cssText) {
      var cont, s;
      if (cssText == null) cssText = '';
      if (el == null) return JQ('<span />');
      s = escapeCssText(el.style.cssText);
      cont = el.innerHTML.trim() || '<span style="display: none;">&nbsp;</span>';
      return JQ("<span style=\"" + s + ";" + cssText + "\">" + cont + "</span>");
    };
    jel.find('pre').each(function() {
      var str, text, _i, _len, _ref, _results;
      _ref = getTextNodesIn(this);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        text = _ref[_i];
        str = text.data.toString().replace(/\&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\t/g, '        ').replace(/\ /g, '&nbsp;').replace(/[\n\r\v]/g, '<br/>');
        _results.push(JQ(text).replaceWith("<span>" + str + "</span>"));
      }
      return _results;
    });
    [['pre, code', 'inline'], ['s, del', 'inline'], ['div, p, blockquote, q, article', 'block'], ['h1, h2, h3, h4, h5, h6', 'block'], ['hr', 'block'], ['td, th', 'table-cell'], ['tr', 'table-row'], ['tbody, thead, tfoot', 'table-row-group'], ['table', 'table']].forEach(function(arg) {
      (function(sel, disp) {
        var s, x, _base;
        while (x = jel.find(sel)[0]) {
          s = spanify(x);
          (_base = s[0].style).display || (_base.display = disp);
          JQ(x).replaceWith(s);
        }
      }).apply(null, arg);
    });
    ['a'].forEach(function(tag) {
      return jel.find(tag).each(function() {
        var st;
        st = this.style.cssText;
        this.style.cssText = '';
        return JQ(this).wrap("<span style=\"" + (escapeCssText(st)) + "\"/>");
      });
    });
    return jel;
  };

  safeParse = function(s) {
    return JSON.parse('\"' + s.replace(/\\'/g, '\'').replace(/\t/g, '\\t') + '\"');
  };

  getGist = function(id, cb) {
    var cssUrl, err, gistCss, gistCssRes, gistHtml, gistJs, gistJsRes, i1, i2, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    gistJsRes = null;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "renren-markdown.user.iced",
        funcname: "getGist"
      });
      GM_xmlhttpRequest({
        url: "https://gist.github.com/" + id + ".js",
        method: 'GET',
        onload: __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return gistJsRes = arguments[0];
            };
          })(),
          lineno: 171
        }),
        onerror: function(err) {
          cb(err);
          throw err;
        }
      });
      __iced_deferrals._fulfill();
    })(function() {
      var _ref;
      gistJs = gistJsRes.responseText;
      cssUrl = (_ref = gistJs.match(/link href=\\"([^"]*)\\"/)) != null ? _ref[1] : void 0;
      if (!cssUrl) {
        err = Error("can't find gist css");
        cb(err);
        throw err;
      }
      gistCssRes = null;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "renren-markdown.user.iced",
          funcname: "getGist"
        });
        GM_xmlhttpRequest({
          url: cssUrl,
          method: 'GET',
          onload: __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return gistCssRes = arguments[0];
              };
            })(),
            lineno: 185
          }),
          onerror: function(err) {
            cb(err);
            throw err;
          }
        });
        __iced_deferrals._fulfill();
      })(function() {
        gistCss = gistCssRes.responseText;
        i1 = gistJs.indexOf("\n");
        i1 = gistJs.indexOf("('", i1) + 2;
        i2 = gistJs.lastIndexOf("')");
        if (i1 > 0 && i2 > 0) {
          gistHtml = safeParse(gistJs.substring(i1, i2));
        } else {
          err = Error("can't find gist content");
          cb(err);
          throw err;
        }
        return cb(null, gistCss, gistHtml);
      });
    });
  };

  str_to_b64 = function(str) {
    return W.btoa(unescape(encodeURIComponent(str)));
  };

  b64_to_str = function(b64) {
    return decodeURIComponent(escape(W.atob(b64)));
  };

  embed = function(h, md) {
    return h + ("<span style=\"visibility: hidden; display: block; height: 0; background-image: url('http://dummy/$rrmd$')\">" + (str_to_b64(md)) + "</span>");
  };

  unembed = function(h) {
    var b64, list, _ref;
    list = JQ(h).find('span').filter(function() {
      return this.style.backgroundImage.match(/\$rrmd\$/);
    });
    b64 = (_ref = list[0]) != null ? _ref.innerHTML : void 0;
    if (b64 == null) b64 = '';
    try {
      return b64_to_str(b64);
    } catch (e) {
      return '';
    }
  };

  W.rrmd = rrmd = {
    lib: {
      JQ: JQ,
      marked: marked,
      SPECIFICITY: SPECIFICITY
    },
    options: {
      delay: 400,
      embedGistQ: true,
      emoticonQ: true,
      removeAnchorQ: true
    },
    init: function() {
      var _this = this;
      this.editor = W.tinymce.editors[0];
      this.ui.init();
      this.ui.area.val(unembed(this.editor.getContent()));
      this.dt = new DelayTrigger(function() {
        return _this.update();
      });
      this.ui.area.bind('input', function() {
        _this.dt.trigger(_this.options.delay);
        if (!_this.busyQ) return _this.ui.setStatus('...', 'Input...', 0);
      });
      this.busyQ = false;
      return this.ui.setStatus('ok', 'Ready.', 0);
    },
    ui: {
      html: "<div id=\"rrmd_wrapper\" style=\"margin: 0 0 1em 0\">\n  <textarea id=\"rrmd_area\" style=\"font-family: Consolas, 'Inconsolata', 'Courier New', 'Monospace';\" placeholder=\"Type markdown _here_!\"></textarea>\n  <div id=\"rrmd_status\" style=\"margin: 0.5em 0 0 0;\">\n    <span id=\"rrmd_status_icon\"></span>\n    <span id=\"rrmd_status_text\"></span>\n    <span id=\"rrmd_status_progress\" style=\"float: right;\"></span>\n    <span style=\"clear: both;\"></span>\n    <div style=\"height: 2px; width: 100%;\"><div id=\"rrmd_status_pb\" style=\"display: none; background-color:#0c0; width: 0%; height: 100%\"></div></div>\n  </div>\n</div>",
      init: function() {
        var _ref, _ref1, _ref2;
        JQ('#editor_tbl').before(this.html);
        this.area = JQ('#rrmd_area');
        this.statusText = JQ('#rrmd_status_text');
        this.statusProgress = JQ('#rrmd_status_progress');
        this.statusPb = JQ('#rrmd_status_pb');
        if ((_ref = JQ('#title_bg')[0]) != null) {
          _ref.style.cssText = 'position: inherit !important; width: 100%';
        }
        if ((_ref1 = JQ('#title')[0]) != null) _ref1.style.cssText = 'width: 98%';
        return (_ref2 = JQ('#editor_ifr')[0]) != null ? _ref2.contentDocument.body.style.paddingTop = "0px" : void 0;
      },
      setStatus: function(type, text, progress) {
        var p, ___iced_passed_deferral, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        console.log(progress + ':' + text);
        if (text != null) this.statusText.html(text);
        if ((0 <= progress && progress <= 1)) {
          p = Math.round(progress * 100).toString() + '%';
          this.statusProgress.html(p);
          (function(__iced_k) {
            switch (progress) {
              case 0:
                return __iced_k(_this.statusPb.stop(true).css('width', 0).hide());
              case 1:
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "renren-markdown.user.iced",
                    funcname: "setStatus"
                  });
                  _this.statusPb.stop(true).css('opacity', '1').show().animate({
                    width: p
                  }, 500, 'linear', __iced_deferrals.defer({
                    lineno: 284
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "renren-markdown.user.iced",
                      funcname: "setStatus"
                    });
                    _this.statusPb.fadeOut(1500, 'swing', __iced_deferrals.defer({
                      lineno: 285
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    return __iced_k(_this.statusPb.css('width', 0));
                  });
                });
                break;
              default:
                return __iced_k(_this.statusPb.show().animate({
                  width: p
                }, 750, 'swing'));
            }
          })(__iced_k);
        } else {
          return __iced_k();
        }
      }
    },
    markdown: function(md) {
      var el;
      el = JQ(marked(md));
      if (!el.length) return JQ('<span />');
      el = el.wrapAll('<span />').parent()[0];
      return spanifyAll(inlineCss(el, this.cssRules));
    },
    gistManager: {
      saved: {},
      cssRules: null,
      get: function(id, cb) {
        var el, err, gistCss, gistCssRules, gistHtml, jel, ___iced_passed_deferral, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        if (this.saved[id] != null) return cb(null, this.saved[id]);
        err = null;
        gistCss = '';
        gistHtml = '';
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "renren-markdown.user.iced",
            funcname: "get"
          });
          getGist(id, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                gistCss = arguments[1];
                return gistHtml = arguments[2];
              };
            })(),
            lineno: 302
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (err != null) {
            cb(err);
            throw err;
            return __iced_k();
          } else {
            (function(__iced_k) {
              if (_this.cssRules == null) {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "renren-markdown.user.iced",
                    funcname: "get"
                  });
                  getCssRules(gistCss, __iced_deferrals.defer({
                    assign_fn: (function(__slot_1) {
                      return function() {
                        return __slot_1.cssRules = arguments[0];
                      };
                    })(_this),
                    lineno: 307
                  }));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              } else {
                return __iced_k();
              }
            })(function() {
              gistCssRules = _this.cssRules;
              jel = JQ(gistHtml);
              jel.find('article.markdown-body').each(function() {
                inlineCss(this, rrmd.cssRules);
                inlineCss(this, gistCssRules);
                JQ(this).parentsUntil('div.gist').last().replaceWith(this);
                return null;
              });
              jel.find('.gist-data').each(function() {
                var _base;
                return (_base = this.style).whiteSpace || (_base.whiteSpace = 'nowrap');
              });
              el = spanifyAll(inlineCss(jel.wrapAll('<span />').parent()[0], _this.cssRules));
              return __iced_k(cb(null, _this.saved[id] = el));
            });
          }
        });
      }
    },
    conv: function(cb) {
      var a, el, err, gist, hmd, i, id, list, md, n, re, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        if (_this.cssRules == null) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "renren-markdown.user.iced",
              funcname: "conv"
            });
            getCssRules(RRMD_STYLE, __iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  return __slot_1.cssRules = arguments[0];
                };
              })(_this),
              lineno: 324
            }));
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        md = _this.ui.area.val();
        try {
          el = _this.markdown(md);
        } catch (err) {
          cb(err);
          throw err;
        }
        _this.ui.setStatus(null, null, 0.01);
        (function(__iced_k) {
          if (_this.options.embedGistQ) {
            re = /^(?:(?:http|https)\:\/\/)?gist\.github\.com\/([\w\/]+)/;
            list = el.find('a').toArray().filter(function(a) {
              return re.test(a.href) && a.href === a.innerHTML;
            });
            n = list.length;
            (function(__iced_k) {
              var _i, _len, _ref, _results, _while;
              _ref = list;
              _len = _ref.length;
              i = 0;
              _results = [];
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = function() {
                  return __iced_k(_results);
                };
                _continue = function() {
                  return iced.trampoline(function() {
                    ++i;
                    return _while(__iced_k);
                  });
                };
                _next = function(__iced_next_arg) {
                  _results.push(__iced_next_arg);
                  return _continue();
                };
                if (!(i < _len)) {
                  return _break();
                } else {
                  a = _ref[i];
                  id = a.href.match(re)[1];
                  err = null;
                  gist = '';
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "renren-markdown.user.iced",
                      funcname: "conv"
                    });
                    _this.gistManager.get(id, __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          err = arguments[0];
                          return gist = arguments[1];
                        };
                      })(),
                      lineno: 340
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    if (err != null) {
                      cb(err);
                      throw err;
                    }
                    JQ(a).replaceWith(gist);
                    return _next(_this.ui.setStatus(null, null, 0.01 + 0.99 * (i + 1) / n));
                  });
                }
              };
              _while(__iced_k);
            })(__iced_k);
          } else {
            return __iced_k();
          }
        })(function() {
          if (_this.options.emoticonQ) {
            el.find('img[src=""]').each(function() {
              var em;
              if ((em = EMOTICON[this.alt]) != null) {
                this.src = EMOTICON_ROOT + em.src;
                return this.alt = em.alt;
              }
            });
          }
          if (_this.options.removeAnchorQ) el.find('a[name]').remove();
          hmd = embed(el.wrapAll('<span />').parent().html() || '', md);
          return cb(null, hmd);
        });
      });
    },
    update: function() {
      var err, html, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (this.busyQ) return false;
      this.busyQ = true;
      this.ui.setStatus('wip', 'Converting...', 0);
      err = null;
      html = '';
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "renren-markdown.user.iced",
          funcname: "update"
        });
        _this.conv(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return html = arguments[1];
            };
          })(),
          lineno: 364
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (err != null) {
          _this.ui.setStatus('err', "Error! " + (err.toString()), null);
          _this.busyQ = false;
          throw err;
        }
        _this.editor.setContent(html);
        _this.ui.setStatus('ok', 'Conversion complete.', 1);
        _this.busyQ = false;
        return null;
      });
    }
  };

  checkPageReady = function(cb) {
    var tid;
    return tid = setInterval((function() {
      var _ref, _ref1;
      if (((_ref = W.tinymce) != null ? (_ref1 = _ref.editors) != null ? _ref1[0] : void 0 : void 0) != null) {
        clearInterval(tid);
        return cb();
      }
    }), 1000);
  };

  (function(__iced_k) {
    __iced_deferrals = new iced.Deferrals(__iced_k, {
      filename: "renren-markdown.user.iced"
    });
    checkPageReady(__iced_deferrals.defer({
      lineno: 386
    }));
    __iced_deferrals._fulfill();
  })(function() {
    return rrmd.init();
  });

}).call(this);
